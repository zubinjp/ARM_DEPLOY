trigger:
  branches:
    include:
      - main  # Trigger the pipeline when changes are pushed to the 'main' branch

pool:
  vmImage: 'ubuntu-latest'  # Using the latest Ubuntu VM image to run the pipeline

variables:
  - group: Group1  # Reference to the variable group 'Group1' (ensure variables are present here)

jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to Azure'
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'VMSS-connection'  # Ensure Service Connection name matches exactly
          scriptType: 'bash'  # Use bash for scripting
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Setting subscription context..."
            az account set --subscription $(subscriptionId)  # Set the subscription context dynamically

            echo "Validating required parameters..."
            if [ -z "$(vmUsername)" ] || [ -z "$(vmPassword)" ] || [ -z "$(subscriptionId)" ]; then
              echo "Error: Missing required parameters (vmUsername, vmPassword, subscriptionId)."
              exit 1
            fi

            echo "Deploying ARM Template..."
            az deployment group create \
              --resource-group Vm-Dep-Gp \
              --template-file arm-temp.json \
              --parameters adminUsername=$(vmUsername) adminPassword=$(vmPassword) \
              --parameters roleAssignmentPrincipalId=$(roleAssignmentPrincipalId) \
              --parameters subscriptionId=$(subscriptionId)
        displayName: 'Deploy ARM Template'

      - task: AzureCLI@2
        inputs:
          azureSubscription: 'VMSS-connection'  # Ensure Service Connection name matches exactly
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            echo "Assigning RBAC role to VMSS..."

            # Validate inputs
            if [ -z "$(roleAssignmentPrincipalId)" ] || [ -z "$(roleDefinitionId)" ] || [ -z "$(vmssName)" ]; then
              echo "Error: Missing required parameters (roleAssignmentPrincipalId, roleDefinitionId, vmssName)."
              exit 1
            fi

            echo "Role Definition: $(roleDefinitionId)"
            echo "Principal ID (Group Object ID): $(roleAssignmentPrincipalId)"

            # Assign the role
            az role assignment create \
              --assignee $(roleAssignmentPrincipalId) \
              --role $(roleDefinitionId) \
              --scope "/subscriptions/$(subscriptionId)/resourceGroups/Vm-Dep-Gp/providers/Microsoft.Compute/virtualMachineScaleSets/$(vmssName)"

            if [ $? -eq 0 ]; then
              echo "RBAC role successfully assigned to VMSS."
            else
              echo "Error: Failed to assign RBAC role."
              exit 1
            fi
        displayName: 'Assign RBAC Role to VMSS'
